<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>üìù To-Do List (Vue + Bootstrap)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  >

  <!-- Vue.js CDN -->
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
</head>
<body class="bg-light py-5">

  <div id="app" class="container">

    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <h1 class="text-center mb-4">üìù To-Do List</h1>

    <!-- üîπ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
    <form @submit.prevent="createTask" class="card p-4 mb-4 shadow-sm">
      <div class="row g-2 align-items-end">
        <div class="col-md-4">
          <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input 
            v-model="newTask.title" 
            type="text" 
            class="form-control" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" 
            required
          >
        </div>
        <div class="col-md-4">
          <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <input 
            v-model="newTask.description" 
            type="text" 
            class="form-control" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
          >
        </div>
        <div class="col-md-2">
          <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
          <select v-model="newTask.status" class="form-select">
            <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
            <option value="in_progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
            <option value="done">–°–¥–µ–ª–∞–Ω–æ</option>
          </select>
        </div>
        <div class="col-md-2">
          <button type="submit" class="btn btn-primary w-100">‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
      </div>
    </form>

    <!-- üîπ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á -->
    <ul class="list-group shadow-sm">
      <li 
        v-for="task in tasks" 
        :key="task.id" 
        class="list-group-item d-flex justify-content-between align-items-center"
      >
        <div>
          <strong>{{ task.title }}</strong> ‚Äî 
          {{ task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' }}
          <span 
            class="badge ms-2" 
            :class="'bg-' + statusColor(task.status)"
          >
            {{ statusLabel(task.status) }}
          </span>
        </div>
        <div>
          <button class="btn btn-sm btn-info me-2"
           @click="viewTask(task.id)"
           >üëÅ</button>
          <button 
            class="btn btn-sm btn-secondary me-2" 
            @click="startEdit(task)"
          >‚úèÔ∏è</button>
          <button 
            class="btn btn-sm btn-danger" 
            @click="deleteTask(task.id)"
          >üóëÔ∏è</button>
        </div>
      </li>
    </ul>
<!-- üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
<div class="modal fade" id="viewModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {{ viewTaskData.title }}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {{ viewTaskData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' }}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {{ statusLabel(viewTaskData.status) }}</p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  </div>
</div>

    <!-- üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
    <div class="modal fade" id="editModal" tabindex="-1">
      <div class="modal-dialog">
        <form @submit.prevent="updateTask" class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
              <input 
                type="text" 
                class="form-control" 
                v-model="editTask.title" 
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
              >
            </div>
            <div class="mb-3">
              <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <input 
                type="text" 
                class="form-control" 
                v-model="editTask.description" 
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
              >
            </div>
            <div class="mb-3">
              <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
              <select class="form-select" v-model="editTask.status">
                <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                <option value="in_progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                <option value="done">–°–¥–µ–ª–∞–Ω–æ</option>
              </select>
            </div>
          </div>
          <div class="modal-footer">
            <button class="btn btn-primary" type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          </div>
        </form>
      </div>
    </div>

  </div>

  <!-- Bootstrap Bundle JS (—Å Popper) -->
  <script 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>

  <!-- Vue App -->
  <script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
          tasks: [],
          newTask: {
            title: '',
            description: '',
            status: 'pending'
          },
          viewTaskData: {},
          editTask: {},
          editModal: null,
          viewModal: null
        }
      },
      methods: {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        fetchTasks() {
          fetch('/public/api/tasks')
            .then(res => res.json())
            .then(data => this.tasks = data);
        },
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        createTask() {
          fetch('/public/api/tasks', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(this.newTask)
          }).then(() => {
            this.newTask = { title: '', description: '', status: 'pending' };
            this.fetchTasks();
          });
        },
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        deleteTask(id) {
          if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) return;
          fetch(`/public/api/tasks/${id}`, { method: 'DELETE' })
            .then(() => this.fetchTasks());
        },
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        startEdit(task) {
          this.editTask = { ...task };
          this.editModal = new bootstrap.Modal(document.getElementById('editModal'));
          this.editModal.show();
        },
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        updateTask() {
          fetch(`/public/api/tasks/${this.editTask.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(this.editTask)
          }).then(() => {
            this.editModal.hide();
            this.fetchTasks();
          });
        },
        // –¶–≤–µ—Ç –±–µ–π–¥–∂–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        statusColor(status) {
          return {
            pending: 'secondary',
            in_progress: 'warning',
            done: 'success'
          }[status];
        },
        // –õ–µ–π–±–ª —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        statusLabel(status) {
          return {
            pending: '–û–∂–∏–¥–∞–Ω–∏–µ',
            in_progress: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            done: '–°–¥–µ–ª–∞–Ω–æ'
          }[status];
        },
        viewTask(id) {
  fetch(`/public/api/tasks/${id}`)
    .then(res => res.json())
    .then(data => {
      this.viewTaskData = data;
      if (!this.viewModal) {
        this.viewModal = new bootstrap.Modal(document.getElementById('viewModal'));
      }
      this.viewModal.show();
    });
}

      },
      mounted() {
        this.fetchTasks();
      }
    }).mount('#app');
  </script>

</body>
</html>